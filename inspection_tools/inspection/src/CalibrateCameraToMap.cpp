#include <gflags/gflags.h>

#include <beam_utils/gflags.h>
#include <inspection/CameraToMapAligner.h>

DEFINE_string(map, "",
              "Full path to map (Required). Must be a PCD and all points must "
              "be in the same frame as the poses' fixed frame");
DEFINE_validator(map, &beam::gflags::ValidateFileMustExist);

DEFINE_string(
    poses, "",
    "Full path poses file (Required). See pose file types in "
    "libbeam/beam_mapping/poses.h. Or extract poses using 3d_map_builder");
DEFINE_validator(poses, &beam::gflags::ValidateFileMustExist);

DEFINE_string(poses_moving_frame_override, "",
              "If you want to override the moving frame in the poses file, "
              "enter the correct frame id here (Optional)");

DEFINE_string(image_container, "",
              "Full path to image container folder (Required). Image container "
              "can be generated by running the ExtractImages binary.");
DEFINE_validator(image_container, &beam::gflags::ValidateDirMustExist);

DEFINE_string(extrinsics, "",
              "Full path to extrinsics json (Required). See "
              "beam_robotics/calibration for file formats");
DEFINE_validator(extrinsics, &beam::gflags::ValidateJsonFileMustExist);

DEFINE_string(intrinsics, "",
              "Full path to intrinsics json (Required). See "
              "beam_robotics/calibration for file formats");
DEFINE_validator(intrinsics, &beam::gflags::ValidateJsonFileMustExist);

DEFINE_string(
    reference_frame, "",
    "Reference frame id (Required). This app will allow you to edit one "
    "transform from camera to this reference frame, i.e., T_reference_camera. "
    "You will need to visualize your extrinsics and determine which transform "
    "you want to edit. Note that the camera frame id is determined "
    "automatically from your image container json file.");
DEFINE_validator(reference_frame, &beam::gflags::ValidateCannotBeEmpty);

DEFINE_string(
    output, "",
    "Full path to output file (Required). Example: /home/user/pose_file.json");
DEFINE_validator(output, &beam::gflags::ValidateMustBeJson);

int main(int argc, char* argv[]) {
  gflags::ParseCommandLineFlags(&argc, &argv, true);

  inspection::CameraToMapAligner::Inputs inputs{
      .map = FLAGS_map,
      .poses_moving_frame_override = FLAGS_poses_moving_frame_override,
      .image_container = FLAGS_image_container,
      .extrinsics = FLAGS_extrinsics,
      .intrinsics = FLAGS_intirinsics,
      .reference_frame = FLAGS_reference_frame,
      .output = FLAGS_output};
  inspection::CameraToMapAligner aligner(inputs);
  aligner.Run();

  return 0;
}